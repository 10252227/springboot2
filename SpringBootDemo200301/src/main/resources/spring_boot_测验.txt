一、选择题（共12小题，每小题2.5分，共30分）
	以下不是spring boot优点的是 ( C )
		A．快速搭建项目
		B．简化配置  
		C．自动配置  
		D．无需容器
	Spring Boot配置，以下哪个优先级最高（ A ）
		A、外置：xx.jar同目录下/config/application.properties；
		B、外置：xx.jar同目录下/config/application.yml；
		C、内置：src/main/resources/config；
		D、内置：src/main/resources
	以下log日志级别哪个最高（ D ）
		A、DEBUG
		B、INFO
		C、WARN
		D、ERROR
	以下不是spring boot的核心注解的是 ( D  )
		A.	@SpringBootConfiguration
		B.	@EnableAutoConfiguration
		C.	@ComponentScan
		D.	@MapperScan
	要使用springMVC的功能，以下哪个架包是必须加的 (  C )
		A．spring-boot-starter-jdbc  
		B．spring-boot-starter-thymeleaf  
		C．spring-boot-starter-web  
		D．mybatis-spring-boot-starter
	以下哪个注解不能加在类上 ( B )
		A.	@Controller
		B.	@ResponseBody
		C.	@RestController
		D.	@RequestMapping
	当控制层上有@RestController注解时，方法中返回一个字符串“<h1>Hello</h1>” 的结果是 ( A )
		A. 一级标题显示的Hello
		B.	找不到Hello.html
		C.	<h1>Hello</>
		D.	Hello
	SpringBoot项目中配置文件的格式 (  C )
		A．properties  
		B．yml  
		C．两者都可以
	前台使用json参数格式，控制器consumer、参数使用的注解是（ A ）
		A、application/josn ---- @RequestBody
		B、application/josn ---- @ModelAttribute
		C、application/x-www-form-urlencoded ---- @RequestBody
		D、application/x-www-form-urlencoded ---- @ModelAttribute
	@Pointcut("execution(public * com.thornBird.sbd.modules.*.controller.*.*(..))")，第三个*代表（  C  ）
		A、代表返回类型不限
		B、代表module下所有子包
		C、代表所有类
		D、代表所有方法
	Url匹配风格中/admin*，以下哪个匹配不正确（ D ）
		A、/admin
		B、/admin1
		C、/admin123
		D、/admin/1
	Mybatis框架中，插入数据使用那个注解（  B）
		A、@Update
		B、@Insert
		C、@Select
		D、@InsertMapping
二、填空题（共5小题，每小题5分，共25分）
	Java配置依赖的2个注解是	 @Confirguration，@Bean；
	修改tomcat端口号为9090应该怎么写？	server.port=9090；
	自定义拦截器需要实现	HandlerInterceptor	接口；
	过滤器需要使用	@WebFilter	注解；
	上传文件，使用	MultipartFile 	接收文件对象，consumer使用	multipart/form-data；
三、问答题（每题5分）
	简述Spring
		Spring是一个轻量级的开发框架，Spring的核心是控制反转（IOC）和面向切面（AOP）
	简述Git使用流程，写几个常用Git命令；
		使用流程：
			安装git，在github注册账号，
			创建远程仓库并复制远程仓库地址 —— > 本地创建本地仓库 —— > 进入本地仓库路径下得DOS窗口，
			使用git clone  远程仓库地址 
		常用命令：
			git clone 
			git pull
			git push ... 
	简述敏捷开发、Scrum流程；
		敏捷开发：客户需求为核心，搞笑的开发，将大项目拆分成小项目，分别独立完成，控制周期，以任务优先级，完成功能模块，根据客户反馈持续集成开发
		Scrum流程：
			一个需求
				1：预估总的时间，形成一个周期，划分大的任务列表；
				2：计划会议：将大的任务再次拆分，细化成issue，每个issue开发周期控制在1-2天，分派到个人头上
	简述shiro两大功能实现流程；
		1：身份认证： 用户在前端输入用户名和密码，控制层调用login方法，
			在相应的实现层调用subject组件，将前端输入的用户名密码包装成为令牌，
			调用subject.login()方法，跳转到realm中，用获取到的用户名到数据库中查询对应的用户，包装成为身份验证器，
			将令牌和身份验证器做比对，成功则登陆，失败则报错
		2：资源授权：用户在前端输入用户名密码，控制层调用login()方法，
			对应的实现层回去subject组件，调用subject.checkRoles()方法，
			在调用realm中的资源授权方法，包装资源验证器，
			在页面的相应地方添加标签，在控制器添加注解，
			访问相应的页面和控制器时，资源验证器与页面标签或者控制器注解进行比对
四、编程题（共2小题，1题12分，2题13分，共25分）
	访问控制层，将一个List装入requset中，再在页面上以表格的形式显示出来
	控制层：
		@PostMapping(value = "/users", consumes = "application/json")
		public PageInfo<User> getUserBySearchVo(@RequestBody SearchVo searchVo) {
			return userService.getUserBySearchVo(searchVo);
		}
	页面：
		<table id="datatable" class="table table-striped table-bordered" style="width: 100%">
			<thead>
				<tr>
					<th>User Id</th>
					<th>User Name</th>
					<th>Password</th>
					<th>Create Date</th>
					<th>Operation</th>
				</tr>
			</thead>
			<tbody></tbody>
		</table>
		
		function initTable(pageSize) {
			$('#datatable').DataTable({
				'paging': true, //分页
				"serverSide": true, //开启后端分页
				"pagingType": "full_numbers", //分页样式的类型simple/simple_numbers/full/full_numbers
				"pageLength": pageSize, //定义初始的页长
				"processing": true, 
				"destroy": true, //允许销毁替换，在表格重新查询时，可以自动销毁以前的data
				'lengthChange': true, //控制是否能够调整每页的条数
				'searching': true,
				'data-show-refresh': true,
				'ordering': true,
				'autoWidth': false,
				"ajax": function (data, callback, settings) {
					// 从data获取查询数据
					var columIndex = data.order[0].column;
					var sort = data.order[0].dir;
					var orderBy = data.columns[columIndex].name;
					pageSize = data.length == undefined ? pageSize : data.length;
					
					var searchVo = {};
					searchVo.currentPage = (data.start / pageSize) + 1;
					searchVo.pageSize = pageSize;
					searchVo.orderBy = orderBy;
					searchVo.sort = sort;
					searchVo.keyWord = data.search.value;

					$.ajax({
						url : "/api/users",
						type : "post",
						contentType: "application/json",
						data : JSON.stringify(searchVo),
						success : function (rs) {
							var fData = {
								draw :0,
								recordsTotal: 0,
								recordsFiltered: 0,
								data: []
							};
							if (!rs) {
								layer.alert("请求出错，请稍后重试" + rs.errmsg, {icon: 2});
								callback(fData);
								return;
							};
							if (rs.list == null) {
								$('#datatable tbody tr').remove();
								$('#loading').remove();
								callback(fData);
								return;
							}
							$('#loading').remove();
							var gearDatas = [];
							for (var i = 0; i < rs.list.length; i++) {
								//包装行数据
								var rowData = new TData(rs.list[i].userId, rs.list[i].userName, 
										rs.list[i].password, rs.list[i].createDate);
								// 将行数据放到数组里
								gearDatas.push(rowData);
							}
							fData.data = gearDatas;
							fData.recordsTotal = rs.total;
							fData.recordsFiltered = rs.total;
							callback(fData);
						},
						error : function (data) {
							layer.alert(data.responseText, {icon: 0});
						}
					});
				},
				"columns": [ //定义行数据字段
					{data: 'userId', name: "user_id", sortable: true}, 
					{data: 'userName', name: "user_name", sortable: true}, 
					{data: 'password', name: "password", sortable: true}, 
					{data: 'createDate', name: "create_date", sortable: true}, 
					{data: 'operate', width: '80px', sortable: false}
				]
			});
		}
	请写出重定向到某个页面的代码
	return "redirect:/index";
	
	
	
	
	